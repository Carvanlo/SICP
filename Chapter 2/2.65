#lang planet neil/sicp

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

(define (make-tree entry left right)
  (list entry left right))

(define (entry tree)
  (car tree))

(define (left-branch tree)
  (cadr tree))

(define (right-branch tree)
  (caddr tree))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1
                     (intersection-set (cdr set1)
                                       (cdr set2))))
               ((< x1 x2)
                (intersection-set (cdr set1) set2))
                ((< x2 x1)
                 (intersection-set set1 (cdr set2)))))))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(define (intersection-tree tree another)
  (list->tree
   (intersection-set (tree->list-2 tree)
                     (tree->list-2 another))))

(define (union-set set another)
  (cond ((and (null? set) (null? another))
         '())
        ((null? set)
         another)
        ((null? another)
         set)
        (else
         (let ((x (car set)) (y (car another)))
           (cond ((= x y)
                  (cons x  (union-set (cdr set) (cdr another))))
                 ((< x y)
                  (cons x (union-set (cdr set) another)))
                 ((> x y)
                  (cons y (union-set set (cdr another)))))))))


(define (union-tree tree another)
  (list->tree
   (union-set (tree->list-2 tree)
              (tree->list-2 another))))
