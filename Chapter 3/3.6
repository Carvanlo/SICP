;test
(define random-init 0)
(define (rand-update x) (+ x 1))
; procedure
(define rand
  (let ((x random-init))
    (define (dispatch message)
      (cond ((eq? message 'generate)
             (begin (set! x (rand-update x))
                    x))
            ((eq? message 'reset)
             (lambda (new-value) (set! x new-value)))))
    dispatch))


; test

(rand 'generate)
;1
(rand 'generate)
;2
((rand 'reset) 0)
;0
(rand 'generate)
;1