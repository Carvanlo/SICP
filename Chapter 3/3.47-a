(define (make-mutex)
  (let ((cell (list false)))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire)))
            ((eq? m 'release) (clear! cell))))
    the-mutex))
(define (clear! cell)
  (set-car! cell false))

(define (test-and-set! cell)
  (if (car cell)
      true
      (begin (set-car! cell true)
             false)))

(define (make-semaphore n)
  (let ((mutex (make-mutex)))

    (define (acquire)
      (mutex 'acquire)
      (if (> n 0)
          (begin (set! n (- n 1))
                 (mutex 'release)
                 'ok)
          (begin (mutex 'release)
                 (acquire))))

    (define (release)
      (mutex 'acquire)
      (set! n (+ n 1))
      (mutex 'release)
      'ok)

    (define (dispatch mode)
      (cond ((eq? mode 'acquire)
             (acquire))
            ((eq? mode 'release)
             (release))
            (else
             (error "Unknown mode MAKE-SEMAPHORE" mode))))

    dispatch))

