(define (stream-map proc . list-of-stream)
  (if (null? (car list-of-stream))
      '()
      (cons-stream
       (apply proc
              (map (lambda (s)
                     (stream-car s))
                   list-of-stream))
       (apply stream-map
              (cons proc (map (lambda (s)
                                (stream-cdr s))
                              list-of-stream))))))

; test

(define (stream-enumerate-interval low high)
  (if (> low high)
      the-empty-stream
      (cons-stream
       low
       (stream-enumerate-interval (+ low 1) high))))

(define (stream-car stream) (car stream))
(define (stream-cdr stream) (force (cdr stream)))

(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
      (begin (proc (stream-car s))
             (stream-for-each proc (stream-cdr s)))))

(define (display-stream s)
  (stream-for-each display-line s))

(define (display-line x)
  (newline)
  (display x))

